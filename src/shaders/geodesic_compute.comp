#version 460 core

layout(local_size_x = 8, local_size_y = 8) in;

// Uniform 参数
uniform vec3 cameraPos;
uniform float stepSize;
uniform int n_sample;

// 摄像机角度（极角和方位角）
uniform float cameraTheta; // 方位角（绕 z 轴）
uniform float cameraPhi;   // 仰角（与 z 轴夹角）

// 屏幕分辨率
uniform int screenWidth ;
uniform int screenHeight ;
// 摄像机视角
uniform vec2 sight = vec2(1.6,1.2);

//黑洞质量
uniform float M = 0.2;


// 输出：每个像素对应的采样点
layout(std430, binding = 0) buffer SampleBuffer {
    vec4 samples[];
};

// 构造摄像机坐标系的基向量
mat3 getCameraBasis(float theta, float phi) {
    vec3 forward = vec3(
        sin(phi) * cos(theta),
        sin(phi) * sin(theta),
        cos(phi)
    );
    vec3 right = normalize(cross(vec3(0.0, 0.0, 1.0), forward));
    vec3 up = cross(forward, right);
    return mat3(right, up, forward);
}

void main() {
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (pixelCoord.x >= screenWidth || pixelCoord.y >= screenHeight)
        return;

    vec2 resolution = vec2(screenWidth, screenHeight);
    vec2 ndc = (vec2(pixelCoord) / resolution) * 2.0 - 1.0;
    ndc = ndc * sight;
    // 构建摄像机空间的射线方向（正交投影模拟）
    vec3 viewDir = normalize(vec3(ndc.x, -ndc.y, 1.5));

    // 构建摄像机基向量
    mat3 camBasis = getCameraBasis(cameraTheta, cameraPhi);

    // 转换到世界空间
    vec3 rayDir = camBasis * viewDir;
    
    // 计算该像素对应样本起始索引
    int pixelIndex = pixelCoord.y * screenWidth + pixelCoord.x;
    int baseIndex = pixelIndex * n_sample;

    // 存储采样点
    int j = 0;
    vec3 r = cameraPos;
    vec3 v = camBasis * viewDir;
    float h = length(cross(r,v));
    float dt = stepSize;
    float t = 0;
    for (int i = 0; i < 1800; ++i) {
        t += dt;
        v += - 1.5 *r / pow(length(r),5) * M * h * h * dt;
        r += v * dt;
        if (pow(r.z,2) < 0.1*0.1){
            samples[baseIndex + j] = vec4(r, length(v) * dt);
            j+=1;
        }
        if (j == 32)break;
        if (length(r) < 2 * M)break;
        //samples[baseIndex + i] = vec4(1.0,1.0,1.0, 1.0);
    }
    while (j < 32){
        samples[baseIndex + j] = vec4(0,0,0, 0);
        j+=1;
    }
}